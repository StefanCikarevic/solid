steps:
  - bash: |
      path=''
      if [[ $(deployment) != "none" ]]; then
        # Get version and create version array
        version=$(node -p "require('./package.json').version")
        echo "Version is $version"
        versionArray=($(echo "$version" | tr '.' ' '))
        echo "Version array is ${versionArray[@]}"

        # Set Azure variables to use in templates
        if [[ $(deployment) == "docs" ]]; then
          path='/storybook'
          version+=$path
        fi
        echo "##vso[task.setvariable variable=version]$version"
        echo "Azure Variable <version> is: $(version)"

        patchWildcardPath='x.x.x'
        if [[ $(deployment) == "docs" ]]; then
          patchWildcardPath+=${path}
        fi
        echo "##vso[task.setvariable variable=patchWildcardPath]$patchWildcardPath"
        echo "Azure Variable <patchWildcardPath> is: $(patchWildcardPath)"

        majorWildcardPath=${versionArray[0]}
        majorWildcardPath+='.x.x'
        if [[ $(deployment) == "docs" ]]; then
          majorWildcardPath+=${path}
        fi
        echo "##vso[task.setvariable variable=majorWildcardPath]$majorWildcardPath"
        echo "Azure Variable <majorWildcardPath>is: $(majorWildcardPath)"

        minorWildcardPath=${versionArray[0]}
        minorWildcardPath+=${versionArray[1]}
        minorWildcardPath+='.x'
        if [[ $(deployment) == "docs" ]]; then
          minorWildcardPath+=${path}
        fi
        echo "##vso[task.setvariable variable=minorWildcardPath]$minorWildcardPath"
        echo "Azure Variable <minorWildcardPath>is: $(minorWildcardPath)"

        echo "##vso[task.setvariable variable=path]$path"
        echo "Azure Variable <path>is: $(path)"
      fi
    displayName: 'Set version and wildcard variables'

  ## Deploy to CDN
  - task: AzureCLI@2
    displayName: 'Deploying to Azure Blob Storage'
    inputs:
      azureSubscription: 'Workload CI/CD Service Connection (S_STATICCONTENT_PROD)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        if [[ $(deployment) != "none" ]]; then
          # Deploy to version folder
          set -x
          echo "Target folder is $version"
          az storage blob upload-batch \
            --destination \$web \
            --account-name "safesoliddesignsysprod" \
            --source "dist$(path)" \
            --destination-path "/$(version)" \
            --overwrite
          set +x

          # Deploy to patch wildcard folder
          set -x
          echo "Target folder is x.x.x"
          az storage blob upload-batch \
            --destination \$web \
            --account-name "safesoliddesignsysprod" \
            --source "dist$(path)" \
            --destination-path "/$(patchWildcardPath)" \
            --overwrite
          set +x

          # Deploy to minor wildcard folder
          set -x
          echo "Target folder is ${versionArray[0]}.${versionArray[1]}.x"
          az storage blob upload-batch \
            --destination \$web \
            --account-name "safesoliddesignsysprod" \
            --source "dist$(path)" \
            --destination-path "/$(minorWildcardPath)" \
            --overwrite
          set +x

          # Deploy to major wildcard folder
          set -x
          echo "Target folder is ${versionArray[0]}.x.x"
          az storage blob upload-batch \
            --destination \$web \
            --account-name "safesoliddesignsysprod" \
            --source "dist$(path)" \
            --destination-path "/$(majorWildcardPath)" \
            --overwrite
          set +x
        fi

  ## Purge CDN for all folders
  - template: purge-cdn.template.yml
